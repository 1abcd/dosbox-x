General DOSBox-Xng ideas:

* Multithreading

Most modern systems today have at least a dual core CPU, typically quad core.
Why not take advantage of that to enable some parallel operations, or at least
maintain a responsive UI even if emulation is hung.

- Display rendering and UI compositing could run in it's own thread to maintain
  a consistent frame rate and composite output from the DOS emulation.

- Audio rendering could run in a separate thread (which current versions already
  do due to how SDL1 and SDL2 run audio output).

- CPU core idea: What if one thread were used to read and preprocess x86 opcodes
  from memory (effectively using one core to emulate the CPU prefetch queue),
  while the emulation thread were to take those preprocessed x86 "tokens" from
  the prefetch queue and handle them quickly.

  In fact, the prefetch thread might help the emulation thread by filling up the
  queue and possibly combining or optimizing the tokens before handing off.

  In this way, two cores on the CPU may speed up emulation by making one the
  prefetch queue with some optimization and the other the CPU emulation thread
  that runs each token through a fast switch statement.

  Furthermore I see no reason why a prefetch thread (one the queue is full)
  couldn't use it's idle time to predict the register contents and fetch memory
  referenced by the instruction so that the emulation thread has the data
  already in hand to execute the instruction.

  It might be faster that way than trying to do that all in one thread.

- Disk I/O: Any I/O involving the disk or floppy could be emulated without
  halting emulation by dispatching it to a thread. The code in the emulation
  can wait for the in-emulation equivalent of a signal (such as, an interrupt
  for completion of an IDE read/write command) which the asynchronous I/O will
  send when completed. Calling out to the host for disk I/O would no longer
  temporarily hang emulation.

