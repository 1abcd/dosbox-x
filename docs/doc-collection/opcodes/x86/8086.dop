
arch "x86";
description "Machine-parsable list of opcodes";
charset_encoding "UTF-8"; /* default */

/* predefined variables:
   codesize == 16 || codesize == 32 || codesize == 64: word code access size (affects code handling)
   datasize == 16 || datasize == 32 || datasize == 64: word data access size (affects data handling)
   dsreg: default segment OR segment override
   CS, DS, ES, FS, GS, SS: segment registers
   reg: general register, operand (regw if word, regb if byte)
   regb: general register, byte operand (AH, AL, etc)
   regw: general register, word operand (AX, BX, CX, etc if 16-bit, EAX, EBX, etc if 32-bit)
   sreg: segment register, operand
   rm: register/memory operand, word operand
   rmb: register/memory operand, byte operand
   rmw: register/memory operand, byte operand
   mrm: mod/reg/rm (with optional scalar/index/byte if 32-bit addressing with the right combination)
   accum: AX/EAX
   immb: 8-bit immediate
   immw: word immediate
   sib: scalar/index/byte
   flags: flags register (FLAGS if 16-bit, EFLAGS if 32-bit)
   flags(...): specific flags (bitmask)
   stackp: stack pointer (SP/ESP)
   basep: base pointer (BP/EBP)
   ip: instruction pointer (IP/EIP) */

/* avoid copy-pasta */
common opcode "ADD" param(dst,src) {
    modifies flags(CF,PF,AF,ZF,SF,OF);

    /* dst += src */
    input dst,src; /* reads dst, src */
    output dst; /* writes dst */
}

opcode sequence(0x00 mrm) name "ADD" { /* ADD r/m, reg */
    common opcode "ADD" param(rmb,regb);
}

opcode sequence(0x01 mrm) name "ADD" { /* ADD r/m, reg */
    common opcode "ADD" param(rmw,regw);
}

opcode sequence(0x02 mrm) name "ADD" { /* ADD reg, r/m */
    common opcode "ADD" param(regb,rmb);
}

opcode sequence(0x03 mrm) name "ADD" { /* ADD reg, r/m */
    common opcode "ADD" param(regw,rmw);
}

opcode sequence(0x04 immb) name "ADD" { /* ADD AL, imm */
    common opcode "ADD" param(AL,immb);
}

opcode sequence(0x05 immw) name "ADD" { /* ADD [E]AX, imm */
    common opcode "ADD" param(accum,immw);
}

